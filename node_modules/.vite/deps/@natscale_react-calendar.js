import {
  __toESM,
  require_react
} from "./chunk-ILK4XV7T.js";

// node_modules/@natscale/react-calendar/dist/index.esm.js
var import_react = __toESM(require_react());
var o = function() {
  return o = Object.assign || function(e2) {
    for (var t2, n2 = 1, r2 = arguments.length; n2 < r2; n2++) for (var a2 in t2 = arguments[n2]) Object.prototype.hasOwnProperty.call(t2, a2) && (e2[a2] = t2[a2]);
    return e2;
  }, o.apply(this, arguments);
};
var s = { 0: "Su", 1: "Mo", 2: "Tu", 3: "We", 4: "Th", 5: "Fr", 6: "Sa" };
var u = { 0: "January", 1: "February", 2: "March", 3: "April", 4: "May", 5: "June", 6: "July", 7: "August", 8: "September", 9: "October", 10: "November", 11: "December" };
function d(e2) {
  return "".concat(e2.getFullYear() < 10 ? "0" + e2.getFullYear() : e2.getFullYear(), "_").concat(e2.getMonth() < 10 ? "0" + e2.getMonth() : e2.getMonth(), "_").concat(e2.getDate() < 10 ? "0" + e2.getDate() : e2.getDate());
}
function g(e2, t2) {
  if (t2.getFullYear() < e2.getFullYear()) return true;
  if (t2.getFullYear() === e2.getFullYear()) {
    if (t2.getMonth() < e2.getMonth()) return true;
    if (t2.getMonth() === e2.getMonth() && t2.getDate() < e2.getDate()) return true;
  }
  return false;
}
function h(e2) {
  return null != e2 && e2.getTime && !isNaN(e2.getTime());
}
function f(e2, t2) {
  return e2.getFullYear() === t2.getFullYear() && e2.getMonth() === t2.getMonth() && e2.getDate() === t2.getDate();
}
function y(e2, t2, n2) {
  var r2 = e2.getFullYear(), a2 = e2.getMonth(), i2 = e2.getDate(), l2 = t2.getFullYear(), c2 = t2.getMonth(), o2 = t2.getDate(), s2 = n2.getFullYear(), u2 = n2.getMonth(), d2 = n2.getDate();
  return r2 <= s2 && s2 <= l2 && (r2 < s2 && s2 < l2 || (r2 === l2 ? a2 <= u2 && u2 <= c2 && (a2 < u2 && u2 < c2 || (a2 === c2 ? i2 <= d2 && d2 <= o2 && u2 === c2 : a2 === u2 ? i2 <= d2 : c2 === u2 && d2 <= o2)) : r2 === s2 ? u2 > a2 || u2 === a2 && d2 >= i2 : l2 === s2 && (u2 < c2 || u2 === c2 && d2 <= o2)));
}
function w(e2) {
  return e2 % 4 == 0 && e2 % 100 != 0 || e2 % 400 == 0;
}
function m(e2, t2) {
  return { 0: 31, 1: w(e2) ? 29 : 28, 2: 31, 3: 30, 4: 31, 5: 30, 6: 31, 7: 31, 8: 30, 9: 31, 10: 30, 11: 31 }[t2];
}
function v(e2) {
  return m(e2.getFullYear(), e2.getMonth()) === e2.getDate();
}
function D(e2) {
  return 0 === e2 ? 11 : e2 - 1;
}
function _(e2) {
  return 11 === e2 ? 0 : e2 + 1;
}
function S(e2) {
  return 1 === e2 ? 1 : e2 - 1;
}
function b(e2) {
  return e2 + 1;
}
function M(e2) {
  return function(e3) {
    return 11 === e3.getMonth() && v(e3);
  }(e2) ? new Date(e2.getFullYear() + 1, 0, 1) : v(e2) ? new Date(e2.getFullYear(), e2.getMonth() + 1, 1) : new Date(e2.getFullYear(), e2.getMonth(), e2.getDate() + 1);
}
function k(e2, t2) {
  var n2 = 6 - t2;
  return e2 <= n2 ? e2 + t2 : e2 - n2 - 1;
}
function R(e2) {
  return e2 % 20 == 0 ? 20 * (e2 / 20 - 1) + 1 : 20 * Number(Math.floor(e2 / 20)) + 1;
}
function E(e2) {
  for (var t2 = e2.isRangeSelectModeOn, n2 = e2.isRangeView, r2 = e2.selectedDate, a2 = e2.selectedRangeStart, i2 = e2.selectedRangeEnd, l2 = e2.isHighlight, c2 = e2.newSelectedRangeStart, o2 = e2.newSelectedRangeEnd, s2 = e2.isSelectMultiDate, u2 = e2.selectedMultiDates, d2 = e2.yearInView, g2 = e2.monthInView, h2 = e2.startOfTheWeek, f2 = e2.isDisabled, y2 = e2.checkIfWeekend, w2 = [[], [], [], [], [], []], v2 = function(e3, t3, n3) {
    var r3 = /* @__PURE__ */ new Date();
    return r3.setDate(1), r3.setMonth(t3), r3.setFullYear(e3), function(e4, t4) {
      return void 0 === t4 && (t4 = 0), e4 >= t4 ? e4 - t4 : 6 - t4 + 1 + e4;
    }(r3.getDay(), n3);
  }(d2, g2, h2), b2 = /* @__PURE__ */ new Date(), M2 = m(d2, g2), k2 = 0 === g2, R2 = 11 === g2, E2 = m(k2 ? S(d2) : d2, D(g2)), C2 = 0, V2 = 0, x2 = E2 - (v2 - 1); x2 <= E2; x2++) 7 === V2 && (V2 = 0, C2++), w2[C2].push(p({ currDate: new Date(k2 ? S(d2) : d2, D(g2), x2), activeMonthInView: false, isHighlight: l2, newSelectedRangeEnd: o2, newSelectedRangeStart: c2, selectedDate: r2, selectedRangeEnd: i2, selectedRangeStart: a2, isDisabled: f2, isRangeSelectModeOn: t2, isRangeView: n2, isSelectMultiDate: s2, row: C2, weekColumn: V2, checkIfWeekend: y2, today: b2, selectedMultiDates: u2, startOfTheWeek: h2 })), V2++;
  for (var I2 = 1; I2 <= M2; I2++) 7 === V2 && (V2 = 0, C2++), w2[C2].push(p({ currDate: new Date(d2, g2, I2), activeMonthInView: true, isHighlight: l2, newSelectedRangeEnd: o2, newSelectedRangeStart: c2, selectedDate: r2, selectedRangeEnd: i2, selectedRangeStart: a2, isDisabled: f2, isRangeSelectModeOn: t2, isRangeView: n2, isSelectMultiDate: s2, row: C2, weekColumn: V2, checkIfWeekend: y2, today: b2, selectedMultiDates: u2, startOfTheWeek: h2 })), V2++;
  for (var Y2 = 1; w2[5].length < 7; ) 7 === V2 && (V2 = 0, C2++), w2[C2].push(p({ currDate: new Date(R2 ? d2 + 1 : d2, _(g2), Y2), activeMonthInView: false, isHighlight: l2, newSelectedRangeEnd: o2, newSelectedRangeStart: c2, selectedDate: r2, selectedRangeEnd: i2, selectedRangeStart: a2, isDisabled: f2, isRangeSelectModeOn: t2, isRangeView: n2, isSelectMultiDate: s2, row: C2, weekColumn: V2, checkIfWeekend: y2, today: b2, selectedMultiDates: u2, startOfTheWeek: h2 })), V2++, Y2++;
  return w2;
}
function p(e2) {
  var t2 = e2.currDate, n2 = e2.activeMonthInView, r2 = e2.isHighlight, a2 = e2.newSelectedRangeEnd, i2 = e2.newSelectedRangeStart, l2 = e2.selectedDate, c2 = e2.selectedRangeEnd, o2 = e2.selectedRangeStart, s2 = e2.isDisabled, u2 = e2.isRangeSelectModeOn, w2 = e2.isRangeView, m2 = e2.isSelectMultiDate, v2 = e2.row, D2 = e2.weekColumn, _2 = e2.checkIfWeekend, S2 = e2.today, b2 = e2.selectedMultiDates, M2 = e2.startOfTheWeek;
  return { date: t2, dayOfMonth: t2.getDate(), month: t2.getMonth(), activeMonthInView: n2, isHighlight: "function" == typeof r2 && r2(t2), isInRange: !!w2 && (u2 ? !(!h(i2) || !h(a2)) && (g(a2, i2) ? y(i2, a2, t2) : y(a2, i2, t2)) : !!o2 && !!c2 && y(o2, c2, t2)), isRangeStart: !!w2 && (u2 ? !!h(i2) && f(i2, t2) : !!o2 && f(o2, t2)), isRangeEnd: !!w2 && (!u2 && (!!c2 && f(c2, t2))), year: t2.getFullYear(), dayOfWeek: k(D2, M2), isWeekend: _2(t2), isToday: f(t2, S2), isFirstRow: 0 === v2, isLastRow: 5 === v2, isFirsColumn: 0 === D2, isLastColumn: 6 === D2, isSelected: m2 ? !!b2[d(t2)] : !w2 && (!!l2 && (t2.getMonth() === l2.getMonth() && t2.getFullYear() === l2.getFullYear() && t2.getDate() === l2.getDate())), isDisabled: s2(t2) };
}
var C = { root: { height: "12%", padding: "1% 2%", display: "flex", alignTtems: "center", width: "100%" }, rc_header_nav: { width: "10.14%", height: "100%", flex: "0 0 auto" }, rch_header_label: { width: "65.21%", height: "100%", margin: "0 4.34%", flex: "1 1 auto", display: "flex", justifyContent: "center", alignItems: "center" } };
var V = (0, import_react.memo)(function(t2) {
  var n2 = t2.onClickPrev, r2 = t2.onChangeViewType, a2 = t2.monthsLabel, i2 = t2.showDualCalendar, l2 = t2.isSecondary, c2 = t2.onClickNext, o2 = t2.viewType, s2 = t2.monthInView, u2 = t2.yearInView, d2 = t2.yearMatrixEnd, g2 = t2.yearMatrixStart;
  return import_react.default.createElement("header", { style: C.root, className: "rc_header" }, i2 && l2 ? null : import_react.default.createElement("button", { type: "button", style: C.rc_header_nav, className: "rc_header_nav rc_header_nav-prev", onClick: n2 }, import_react.default.createElement("span", null, "←")), "month_dates" === o2 ? import_react.default.createElement("button", { type: "button", style: C.rch_header_label, className: "rc_header_label rc_header_label-days-of-month", onClick: function() {
    return !l2 && r2("years");
  } }, import_react.default.createElement("div", null, import_react.default.createElement("span", null, a2[s2])), import_react.default.createElement("div", null, import_react.default.createElement("span", null, u2))) : "months" === o2 ? import_react.default.createElement("button", { type: "button", style: C.rch_header_label, className: "rc_header_label rc_header_label-months" }, import_react.default.createElement("div", { onClick: function() {
    return !l2 && r2("years");
  } }, import_react.default.createElement("span", null, u2))) : import_react.default.createElement("button", { type: "button", style: C.rch_header_label, className: "rc_header_label rc_header_label-years", onClick: function() {
    return !l2 && r2("month_dates");
  } }, import_react.default.createElement("div", null, import_react.default.createElement("span", null, g2, "-", d2))), i2 && !l2 && "month_dates" === o2 ? null : import_react.default.createElement("button", { type: "button", style: C.rc_header_nav, className: "rc_header_nav rc_header_nav-next", onClick: c2 }, import_react.default.createElement("span", null, "→")));
});
var x = { width: "100%", height: "100%", display: "flex", alignItems: "center", justifyContent: "center" };
var I = { width: "95%", height: "45%", display: "flex", alignItems: "center", justifyContent: "center" };
var Y = (0, import_react.memo)(function(t2) {
  var n2 = t2.cell, r2 = t2.onMonthClicked, a2 = t2.monthsLabel;
  return import_react.default.createElement("div", { style: x }, import_react.default.createElement("button", { type: "button", style: I, onClick: function() {
    r2(n2);
  } }, a2[n2.month]));
});
var N = { root: { height: "100%" }, "rc_body-row": { height: "24.9%", display: "flex", width: "100%" }, "rc_body-cell": { flexBasis: "33.33%", maxWidth: "33.33%", height: "100%" } };
var F = (0, import_react.memo)(function(t2) {
  var r2 = t2.onChangeViewingMonth, a2 = t2.onChangeViewType, i2 = t2.monthsLabel, l2 = (0, import_react.useMemo)(function() {
    return function(e2) {
      var t3 = Array.from({ length: 12 }, function(t4, n2) {
        return { month: n2, isCurrentMonth: (/* @__PURE__ */ new Date()).getMonth() === n2, isSelectedMonth: 1 === e2[n2] };
      });
      return [t3.slice(0, 3), t3.slice(3, 6), t3.slice(6, 9), t3.slice(9, 12)];
    }({});
  }, []);
  return import_react.default.createElement("div", { role: "grid", style: N.root, className: "rc_body-months" }, l2.map(function(t3, n2) {
    return import_react.default.createElement("div", { style: N["rc_body-row"], className: "rc_body-row", key: n2 }, t3.map(function(t4) {
      return import_react.default.createElement("div", { style: N["rc_body-cell"], className: "rc_body-cell".concat(t4.isCurrentMonth ? " rc_this_month" : ""), key: t4.month }, import_react.default.createElement(Y, { monthsLabel: i2, cell: t4, onMonthClicked: function(e2) {
        r2(e2.month), a2("month_dates");
      } }));
    }));
  }));
});
var O = { width: "100%", height: "100%", display: "flex", alignItems: "center", justifyContent: "center" };
var W = { width: "95%", height: "45%", display: "flex", alignItems: "center", justifyContent: "center" };
var A = (0, import_react.memo)(function(t2) {
  var n2 = t2.cell, r2 = t2.onYearClicked;
  return import_react.default.createElement("div", { style: O }, import_react.default.createElement("button", { type: "button", style: W, onClick: function() {
    r2(n2);
  } }, n2.year));
});
var T = { root: { height: "100%" }, "rc_body-row": { height: "24.9%", display: "flex", width: "100%" }, "rc_body-cell": { width: "20%", height: "100%" } };
var L = (0, import_react.memo)(function(t2) {
  var r2 = t2.onChangeViewType, a2 = t2.onChangeViewingYear, i2 = t2.yearMatrixStart, l2 = (0, import_react.useMemo)(function() {
    return function(e2, t3) {
      var n2 = Array.from({ length: 20 }, function(n3, r3) {
        return { year: e2 + r3, isCurrentYear: (/* @__PURE__ */ new Date()).getFullYear() === e2 + r3, isSelectedYear: 1 === t3[e2 + r3] };
      });
      return [n2.slice(0, 5), n2.slice(5, 10), n2.slice(10, 15), n2.slice(15, 20)];
    }(i2, {});
  }, [i2]);
  return import_react.default.createElement("div", { role: "grid", style: T.root, className: "rc_body-years" }, l2.map(function(t3, n2) {
    return import_react.default.createElement("div", { style: T["rc_body-row"], className: "rc_body-row", key: n2 }, t3.map(function(t4) {
      return import_react.default.createElement("div", { style: T["rc_body-cell"], className: "rc_body-cell".concat(t4.isCurrentYear ? " rc_this_year" : ""), key: t4.year }, import_react.default.createElement(A, { cell: t4, onYearClicked: function(e2) {
        a2(e2.year), r2("months");
      } }));
    }));
  }));
});
var j = { "rc_body-weekdays": { height: "15%", margin: "0", padding: 0, display: "flex", width: "100%", listStyle: "none" }, "rc_body-weekdays_cell": { display: "flex", alignItems: "center", justifyContent: "center", height: "100%", flexBasis: "14.286%", maxWidth: "14.286%" }, "rc_body-weekdays_cell_value": { width: "65.95%", display: "flex", alignItems: "center", justifyContent: "center" } };
var P = (0, import_react.memo)(function(t2) {
  var r2 = t2.startOfWeek, a2 = t2.weekendMap, i2 = t2.weekDaysLabel, l2 = (0, import_react.useMemo)(function() {
    return function(e2) {
      void 0 === e2 && (e2 = 0);
      var t3 = Object.keys(s).slice(e2, 7).concat(Object.keys(s).slice(0, e2));
      return { map: t3.reduce(function(e3, t4) {
        return e3[Number(t4)] = s[Number(t4)], e3;
      }, {}), order: t3 };
    }(r2);
  }, [r2]).order;
  return import_react.default.createElement("ul", { style: j["rc_body-weekdays"], className: "rc_body-weekdays" }, l2.map(function(t3) {
    return import_react.default.createElement("li", { style: j["rc_body-weekdays_cell"], key: t3, className: "rc_body-weekdays_cell".concat(a2[t3] ? " rc_wknd" : "") }, import_react.default.createElement("div", { style: j["rc_body-weekdays_cell_value"] }, import_react.default.createElement("span", null, i2[t3])));
  }));
});
var H = { width: "100%", height: "99%", display: "flex", alignItems: "center", justifyContent: "center" };
var z = (0, import_react.memo)(function(t2) {
  var r2 = t2.cell, a2 = t2.onDateClicked, i2 = t2.noPadRangeCell, l2 = (0, import_react.useMemo)(function() {
    return /* @__PURE__ */ function(e2) {
      return { width: e2 ? "100%" : "69.80%", height: e2 ? "90%" : "80%", display: "flex", alignItems: "center", justifyContent: "center" };
    }(i2);
  }, [i2]), c2 = (0, import_react.useMemo)(function() {
    return /* @__PURE__ */ function(e2) {
      return { width: e2 ? "69.8%" : "100%", height: "92%" };
    }(i2);
  }, [i2]);
  return import_react.default.createElement("div", { style: H }, import_react.default.createElement("div", { style: l2, className: "rc_body-cell_value" }, import_react.default.createElement("button", { type: "button", style: c2, disabled: r2.isDisabled, tabIndex: r2.isDisabled ? -1 : 0, onClick: function() {
    return a2(r2);
  } }, r2.dayOfMonth)));
});
var q = { "rc_body-days-of-month": { height: "85%" }, "rc_body-row": { height: "16.664%", display: "flex", width: "100%", alignItems: "center" }, "rc_body-cell": { flexBasis: "14.286%", maxWidth: "14.286%", height: "100%", display: "flex", aligntems: "center" } };
var B = (0, import_react.memo)(function(t2) {
  var a2 = t2.selectedDate, i2 = t2.selectedRangeStart, l2 = t2.selectedRangeEnd, c2 = t2.newSelectedRangeStart, s2 = t2.startOfWeek, u2 = t2.newSelectedRangeEnd, h2 = t2.isRangeSelectorView, f2 = t2.onChangeRangeSelectMode, y2 = t2.fixedRange, w2 = t2.isFixedRangeView, m2 = t2.isRangeSelectModeOn, v2 = t2.isDisabled, D2 = t2.selectedMultiDates, _2 = t2.isMultiSelectorView, S2 = t2.monthInView, b2 = t2.hideAdjacentDates, k2 = t2.onChangeNewSelectedRangeEnd, R2 = t2.onChangeNewSelectedRangeStart, p2 = t2.weekends, C2 = t2.onChange, V2 = t2.yearInView, x2 = t2.noPadRangeCell, I2 = t2.lockView, Y2 = t2.checkIfWeekend, N2 = t2.onPartialRangeSelect, F2 = t2.isHighlight, O2 = t2.onEachMultiSelect, W2 = (0, import_react.useMemo)(function() {
    return E({ selectedDate: a2, selectedRangeStart: i2, selectedRangeEnd: l2, newSelectedRangeStart: c2, newSelectedRangeEnd: u2, checkIfWeekend: Y2, isRangeView: h2 || w2, isRangeSelectModeOn: m2, weekendIndexes: p2, selectedMultiDates: D2, isSelectMultiDate: _2, yearInView: V2, monthInView: S2, startOfTheWeek: s2, isHighlight: F2, isDisabled: v2 });
  }, [a2, F2, i2, l2, c2, u2, h2, w2, m2, Y2, p2, D2, _2, V2, S2, s2, v2]), A2 = (0, import_react.useCallback)(function(e2) {
    var t3 = e2.date;
    if (!(I2 && t3.getMonth() !== S2)) if (h2 && !w2) if (m2 && c2) {
      var n2 = new Date(c2.getFullYear(), c2.getMonth(), c2.getDate());
      if (g(n2, t3)) {
        var r2 = t3, a3 = n2;
        "function" == typeof C2 && C2([r2, a3]);
      } else {
        r2 = n2, a3 = t3;
        "function" == typeof C2 && C2([r2, a3]);
      }
      k2(void 0), f2(false);
    } else R2(t3), k2(void 0), f2(true), N2 && N2(t3);
    else if (h2 && w2) {
      a3 = function(e3, t4) {
        for (var n3 = t4, r3 = e3, a4 = 0; n3 > 0 && 1500 !== a4; ) r3 = M(r3), n3--, a4++;
        return { endDate: r3 };
      }(t3, y2).endDate;
      "function" == typeof C2 && C2([t3, a3]);
    } else if (_2) {
      var i3 = d(t3), l3 = o({}, D2);
      D2[i3] ? l3[i3] = void 0 : l3[i3] = t3, O2 && O2(t3), C2 && C2(Object.keys(l3).filter(function(e3) {
        return !!l3[e3];
      }).map(function(e3) {
        return l3[e3];
      }));
    } else "function" == typeof C2 && C2(t3);
  }, [I2, S2, h2, w2, _2, m2, c2, k2, f2, C2, R2, N2, y2, D2, O2]);
  return import_react.default.createElement("div", { style: q["rc_body-days-of-month"], className: "rc_body-days-of-month", role: "grid" }, W2.map(function(t3, n2) {
    return import_react.default.createElement("div", { style: q["rc_body-row"], className: "rc_body-row", key: n2 }, t3.map(function(t4) {
      return import_react.default.createElement("div", { style: q["rc_body-cell"], onMouseEnter: function() {
        h2 && m2 && k2(new Date(t4.year, t4.month, t4.dayOfMonth));
      }, key: d(t4.date), className: "rc_body-cell".concat(t4.activeMonthInView ? " rc_active" : "").concat(t4.isWeekend ? " rc_wknd" : "").concat(t4.isToday ? " rc_today" : "").concat(t4.isFirstRow ? " rc_fr" : "").concat(t4.isToday ? " rc_today" : "").concat(t4.isHighlight ? " rc_highlight" : "").concat(t4.isLastRow ? " rc_lr" : "").concat(t4.isFirsColumn ? " rc_fc" : "").concat(t4.isLastColumn ? " rc_lc" : "").concat(t4.isSelected && !h2 ? " rc_selected" : "").concat(t4.isDisabled ? " rc_disabled" : "").concat(t4.isInRange ? " rc_in_range" : "").concat(t4.isRangeStart ? " rc_range_start" : "").concat(t4.isRangeEnd ? " rc_range_end" : "").concat(m2 ? " rc_range_mode" : "") }, !t4.activeMonthInView && b2 ? null : import_react.default.createElement(z, { noPadRangeCell: x2, cell: t4, onDateClicked: A2 }));
    }));
  }));
});
var J = { height: "88%", width: "100%" };
var U = (0, import_react.memo)(function(t2) {
  var c2 = t2.size, o2 = t2.fontSize, s2 = t2.isMultiSelectorView, u2 = t2.isRangeSelectorView, d2 = t2.monthInView, g2 = t2.yearInView, f2 = t2.showDualCalendar, y2 = t2.onChangeViewingMonth, w2 = t2.onChangeViewingYear, m2 = t2.selectedDate, v2 = t2.selectedRangeStart, M2 = t2.view, k2 = t2.setView, E2 = t2.isSecondary, p2 = t2.monthsLabel, C2 = t2.weekDaysLabel, x2 = t2.selectedMultiDates, I2 = t2.lockView, Y2 = t2.startOfWeek, N2 = t2.noPadRangeCell, O2 = t2.weekends, W2 = t2.isRangeSelectModeOn, A2 = t2.onChangeRangeSelectMode, T2 = t2.hideAdjacentDates, j2 = t2.selectedRangeEnd, H2 = t2.newSelectedRangeStart, z2 = t2.onChangeNewSelectedRangeEnd, q2 = t2.onChangeNewSelectedRangeStart, U2 = t2.onPartialRangeSelect, G2 = t2.onEachMultiSelect, K2 = t2.newSelectedRangeEnd, Q2 = t2.fixedRange, X2 = t2.isFixedRangeView, Z2 = t2.isDisabled, $2 = t2.checkIfWeekend, ee2 = t2.onChange, te2 = t2.weekendMap, ne2 = t2.isHighlight, re2 = (0, import_react.useMemo)(function() {
    return function(e2, t3) {
      return { root: { rc: { width: "".concat(e2, "px"), height: "".concat(e2, "px"), fontSize: "".concat(t3, "px"), display: "flex", alignItems: "flex-start", flexDirection: "column", boxSizing: "border-box" } } };
    }(c2, o2);
  }, [c2, o2]);
  (0, import_react.useEffect)(function() {
    h(m2) && (y2(m2.getMonth()), w2(m2.getFullYear()));
  }, [E2, y2, w2, m2]), (0, import_react.useEffect)(function() {
    var e2 = Object.keys(x2).map(function(e3) {
      return x2[e3];
    }).filter(function(e3) {
      return h(e3);
    });
    1 === e2.length && e2[0] && (y2(e2[0].getMonth()), w2(e2[0].getFullYear()));
  }, [E2, y2, w2, x2]);
  var ae = (0, import_react.useState)(R(g2)), ie = ae[0], le = ae[1];
  (0, import_react.useEffect)(function() {
    le(R(g2));
  }, [g2, le]);
  var ce = (0, import_react.useMemo)(function() {
    return [e2 = ie, e2 + 19];
    var e2;
  }, [ie]), oe = ce[0], se = ce[1], ue = (0, import_react.useCallback)(function() {
    var e2;
    "month_dates" === M2 && (0 === d2 && w2(S(g2)), y2(D(d2)));
    "years" === M2 && le(1 === (e2 = ie) ? 1 : R(e2 - 1)), "months" === M2 && w2(1 !== g2 ? g2 - 1 : 1);
  }, [M2, d2, y2, w2, g2, ie]), de = (0, import_react.useCallback)(function() {
    "month_dates" === M2 && (E2 ? (0 === d2 && w2(g2), y2(d2)) : (11 === d2 && w2(b(g2)), y2(_(d2))));
    "years" === M2 && le(R(ie + 20)), "months" === M2 && w2(b(g2));
  }, [M2, E2, d2, y2, w2, g2, ie]), ge = (0, import_react.useRef)(null), he = (0, import_react.useRef)([]), fe = (0, import_react.useState)(false), ye = fe[0], we = fe[1];
  return (0, import_react.useEffect)(function() {
    if (ye) {
      var e2 = ge.current;
      if (e2) {
        he.current = e2 ? Array.from(e2.querySelectorAll('[role="grid"] button:not([disabled])')) : [];
        var t3 = he.current[0], n2 = he.current[he.current.length - 1], r2 = e2.querySelector('[role="grid"] .rc_selected button') || e2.querySelector('[role="grid"] .rc_range_end button') || e2.querySelector('[role="grid"] .rc_range_start button'), a2 = e2.querySelector('[role="grid"] .rc_active button'), i2 = e2.querySelector(".rc_header");
        if (i2) {
          var l2 = i2.querySelector(".rc_header_nav-prev"), c3 = i2.querySelector(".rc_header_nav-next"), o3 = i2.querySelector(".rc_header_label");
          e2 && !e2.contains(document.activeElement) && (r2 ? r2.focus() : a2 ? a2.focus() : t3.focus());
          var s3 = function(e3, n3) {
            var r3, a3, i3 = n3 === t3;
            return e3 ? (r3 = e3, a3 = he.current.indexOf(r3), i3 ? a3 < he.current.length - 1 ? he.current[a3 + 1] : n3 : a3 - 1 > -1 ? he.current[a3 - 1] : n3) : null;
          };
          return e2.addEventListener("keydown", u3, { capture: true }), function() {
            e2.removeEventListener("keydown", u3, { capture: true });
          };
        }
      }
    }
    function u3(e3) {
      var r3 = e3.target, a3 = he.current && he.current.find(function(e4) {
        return e4 === r3;
      });
      if ("Tab" === e3.key && (e3.preventDefault(), (null == i2 ? void 0 : i2.contains(document.activeElement)) ? t3.focus() : null == l2 || l2.focus()), "ArrowDown" === e3.key) {
        e3.preventDefault();
        var u4 = "month_dates" === M2 ? 7 : "months" === M2 ? 3 : 5;
        if (!a3) return;
        for (var d3 = a3; u4 > 0; ) d3 = s3(d3, t3), u4--;
        null == d3 || d3.focus();
      }
      if ("ArrowUp" === e3.key) {
        e3.preventDefault();
        u4 = "month_dates" === M2 ? 7 : "months" === M2 ? 3 : 5;
        if (!a3) return;
        for (d3 = a3; u4 > 0; ) d3 = s3(d3, n2), u4--;
        null == d3 || d3.focus();
      }
      if ("ArrowLeft" === e3.key) if (e3.preventDefault(), document.activeElement === l2) null == c3 || c3.focus();
      else if (document.activeElement === o3) null == l2 || l2.focus();
      else if (document.activeElement === c3) null == o3 || o3.focus();
      else {
        if (!a3) return;
        null == (d3 = s3(a3, n2)) || d3.focus();
      }
      if ("ArrowRight" === e3.key) if (e3.preventDefault(), document.activeElement === l2) null == o3 || o3.focus();
      else if (document.activeElement === o3) null == c3 || c3.focus();
      else if (document.activeElement === c3) null == l2 || l2.focus();
      else {
        if (!a3) return;
        null == (d3 = s3(a3, t3)) || d3.focus();
      }
      "Home" === e3.key && (e3.preventDefault(), t3.focus()), "End" === e3.key && (e3.preventDefault(), n2.focus()), "Escape" === e3.key && (e3.preventDefault(), n2.focus(), n2.blur());
    }
  }, [ge, M2, ye, d2, g2, ie]), import_react.default.createElement("div", { onFocus: function() {
    !ye && we(true);
  }, onBlur: function(e2) {
    e2.currentTarget.contains(e2.target) || we(false);
  }, style: re2.root.rc, className: "rc", ref: ge }, import_react.default.createElement(V, { monthsLabel: p2, isSecondary: E2, showDualCalendar: f2, onClickPrev: ue, onClickNext: de, onChangeViewType: k2, viewType: M2, monthInView: d2, yearInView: g2, yearMatrixStart: oe, yearMatrixEnd: se }), import_react.default.createElement("div", { style: J, className: "rc_body" }, "months" === M2 && import_react.default.createElement(F, { monthsLabel: p2, onChangeViewType: k2, onChangeViewingMonth: y2 }), "years" === M2 && import_react.default.createElement(L, { onChangeViewType: k2, onChangeViewingYear: w2, yearMatrixStart: oe, yearMatrixEnd: se }), "month_dates" === M2 && import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(P, { weekDaysLabel: C2, startOfWeek: Y2, weekendMap: te2 }), import_react.default.createElement(B, { noPadRangeCell: N2, isRangeSelectModeOn: W2, onChangeRangeSelectMode: A2, hideAdjacentDates: T2, selectedDate: m2, selectedRangeStart: v2, selectedRangeEnd: j2, lockView: I2, newSelectedRangeStart: H2, startOfWeek: Y2, onChangeNewSelectedRangeEnd: z2, onChangeNewSelectedRangeStart: q2, onPartialRangeSelect: U2, onEachMultiSelect: G2, newSelectedRangeEnd: K2, isRangeSelectorView: u2, fixedRange: Q2, isFixedRangeView: X2, isDisabled: Z2, checkIfWeekend: $2, selectedMultiDates: x2, isMultiSelectorView: s2, monthInView: d2, weekends: O2, onChange: ee2, yearInView: g2, isHighlight: ne2 }))));
});
function G(e2) {
  var t2 = e2.isMultiSelectorView && e2.selectedMultiDates && e2.selectedMultiDates[Object.keys(e2.selectedMultiDates)[0]];
  return h(e2.viewDate) ? e2.viewDate : e2.isNormalView && h(e2.selectedDate) ? e2.selectedDate : e2.isRangeSelectorView && e2.selectedRangeStart ? e2.selectedRangeStart : t2 && h(t2) ? t2 : /* @__PURE__ */ new Date();
}
var K = { years: 1, months: 1, month_dates: 1 };
var Q = function() {
};
var X = { display: "inline-flex" };
var Z = import_react.default.forwardRef(function(t2, a2) {
  var l2 = t2.value, f2 = t2.isMultiSelector, y2 = t2.className, w2 = void 0 === y2 ? "" : y2, m2 = t2.isRangeSelector, v2 = t2.useDarkMode, D2 = void 0 !== v2 && v2, S2 = t2.weekends, k2 = t2.initialViewDate, R2 = t2.startOfWeek, E2 = void 0 === R2 ? 1 : R2, p2 = t2.fixedRange, C2 = t2.isDisabled, V2 = t2.onPartialRangeSelect, x2 = t2.noPadRangeCell, I2 = void 0 !== x2 && x2, Y2 = t2.onEachMultiSelect, N2 = t2.initialView, F2 = t2.onChange, O2 = t2.isHighlight, W2 = t2.monthsLabel, A2 = void 0 === W2 ? u : W2, T2 = t2.weekDaysLabel, L2 = void 0 === T2 ? s : T2, j2 = t2.lockView, P2 = void 0 !== j2 && j2, H2 = t2.size, z2 = void 0 === H2 ? 276 : H2, q2 = t2.fontSize, B2 = void 0 === q2 ? 16 : q2, J2 = t2.showDualCalendar, Z2 = void 0 !== J2 && J2, $2 = t2.hideAdjacentDates, ee2 = void 0 !== $2 && $2, te2 = !!m2, ne2 = te2 && !!Z2, re2 = !te2 && !!f2, ae = !!(te2 && "number" == typeof p2 && p2 > 0), ie = !te2 && !re2, le = E2, ce = ae ? p2 : 1, oe = (0, import_react.useMemo)(function() {
    return Array.isArray(S2) && (S2.every(function(e2) {
      return "number" == typeof e2;
    }) || 0 === S2.length) ? S2 : [6, 0];
  }, [S2]), se = (0, import_react.useMemo)(function() {
    return h(k2) ? k2 : void 0;
  }, [k2]), ue = (0, import_react.useMemo)(function() {
    return e2 = { customDisabledCheck: C2 }.customDisabledCheck, function(t3) {
      return "function" == typeof e2 && e2(t3);
    };
    var e2;
  }, [C2]), de = (0, import_react.useMemo)(function() {
    return function(e2) {
      var t3 = e2.reduce(function(e3, t4) {
        return e3[t4] = 1, e3;
      }, {});
      return function(e3) {
        return 1 === t3[e3.getDay()];
      };
    }(oe);
  }, [oe]), ge = (0, import_react.useMemo)(function() {
    return oe.reduce(function(e2, t3) {
      return e2[t3] = 1, e2;
    }, {});
  }, [oe]), he = (0, import_react.useMemo)(function() {
    return ie && h(l2) ? l2 : void 0;
  }, [ie, l2]), fe = (0, import_react.useMemo)(function() {
    return re2 && Array.isArray(l2) && l2.every(h) ? l2.reduce(function(e2, t3) {
      return h(t3) && (e2[d(t3)] = t3), e2;
    }, {}) : {};
  }, [re2, l2]), ye = (0, import_react.useMemo)(function() {
    if (!ae || Array.isArray(l2) && function(e3) {
      if (!Array.isArray(e3)) return 0;
      var t4 = e3[0], n3 = e3[1];
      if (!h(t4) || !h(n3)) return 0;
      for (var r2 = t4, a3 = 0; g(n3, r2); ) a3++, r2 = M(r2);
      return a3;
    }(l2) === p2) {
      if (te2 && Array.isArray(l2) && h(l2[0])) {
        var e2 = l2[0].getFullYear(), t3 = l2[0].getMonth(), n2 = l2[0].getDate();
        return new Date(e2, t3, n2);
      }
    } else ;
  }, [p2, ae, te2, l2]), we = (0, import_react.useMemo)(function() {
    if (te2 && ye && Array.isArray(l2) && h(l2[1]) && g(l2[1], ye)) {
      var e2 = l2[1].getFullYear(), t3 = l2[1].getMonth(), n2 = l2[1].getDate();
      return new Date(e2, t3, n2);
    }
  }, [te2, ye, l2]), me = (0, import_react.useState)(false), ve = me[0], De = me[1], _e = (0, import_react.useState)(ye), Se = _e[0], be = _e[1], Me = (0, import_react.useState)(we), ke = Me[0], Re = Me[1], Ee = (0, import_react.useState)(function() {
    return G({ isNormalView: ie, isMultiSelectorView: re2, isRangeSelectorView: te2, selectedDate: he, selectedRangeStart: ye, selectedMultiDates: fe, viewDate: se }).getMonth();
  }), pe = Ee[0], Ce = Ee[1], Ve = (0, import_react.useState)(G({ isNormalView: ie, isMultiSelectorView: re2, isRangeSelectorView: te2, selectedDate: he, selectedRangeStart: ye, selectedMultiDates: fe, viewDate: se }).getFullYear()), xe = Ve[0], Ie = Ve[1], Ye = _(pe), Ne = 0 === Ye ? b(xe) : xe;
  (0, import_react.useImperativeHandle)(a2, function() {
    return { setView: function(e2) {
      e2 && (Ce(e2.getMonth()), Ie(e2.getFullYear()));
    } };
  });
  var Fe = (0, import_react.useCallback)(function(e2) {
    !P2 && Ie(e2);
  }, [P2]), Oe = (0, import_react.useCallback)(function(e2) {
    !P2 && Ce(e2);
  }, [P2]), We = (0, import_react.useState)(N2 && K[N2] ? N2 : "month_dates"), Ae = We[0], Te = We[1], Le = (0, import_react.useCallback)(function(e2) {
    !P2 && Te(e2);
  }, [P2, Te]), je = (0, import_react.useMemo)(function() {
    return { monthsLabel: A2, weekDaysLabel: L2, noPadRangeCell: !!I2 && te2, showDualCalendar: ne2, viewDate: se, useDarkMode: D2, className: w2, hideAdjacentDates: !!ee2, isNormalView: ie, size: z2, isHighlight: O2, fontSize: B2, startOfWeek: le, weekends: oe, isRangeSelectModeOn: ve, onChangeRangeSelectMode: De, selectedDate: he, selectedRangeStart: ye, selectedRangeEnd: we, lockView: !!P2, newSelectedRangeStart: Se, onChangeNewSelectedRangeEnd: Re, onChangeNewSelectedRangeStart: be, onPartialRangeSelect: V2, onEachMultiSelect: Y2, newSelectedRangeEnd: ke, isRangeSelectorView: te2, initialView: N2, fixedRange: ce, isFixedRangeView: ae, isDisabled: ue, checkIfWeekend: de, selectedMultiDates: fe, isMultiSelectorView: re2, onChange: F2, view: Ae, setView: Le, weekendMap: ge, yearInView: xe, monthInView: pe, onChangeViewingMonth: Oe, onChangeViewingYear: Fe };
  }, [I2, A2, L2, te2, ne2, se, D2, w2, ee2, ie, z2, B2, le, oe, ve, he, ye, we, P2, Se, V2, Y2, ke, N2, ce, ae, ue, de, fe, re2, O2, F2, Ae, Le, ge, xe, pe, Oe, Fe]), Pe = (0, import_react.useMemo)(function() {
    return "string" == typeof w2 ? "rc_root".concat(D2 ? " rc_dark" : "").concat(ne2 ? " rc_dual" : "") + " ".concat(w2) + "".concat(I2 && te2 ? " rc_no_range_padding" : "") : "rc_root".concat(D2 ? " rc_dark" : "").concat(ne2 ? " rc_dual" : "") + "".concat(I2 && te2 ? " rc_no_range_padding" : "");
  }, [w2, D2, ne2, I2, te2]);
  return import_react.default.createElement("div", { className: Pe, style: X }, ne2 ? import_react.default.createElement(import_react.default.Fragment, null, import_react.default.createElement(U, o({}, je, { isSecondary: false })), import_react.default.createElement(U, o({}, je, { view: "month_dates", setView: Q, isSecondary: true, monthInView: Ye, yearInView: Ne }))) : import_react.default.createElement(U, o({}, je, { isSecondary: false })));
});
var $ = function(e2) {
  if (!Array.isArray(e2)) return [];
  var t2 = e2[0], n2 = e2[1];
  if (!h(t2) || !h(n2)) return [];
  for (var r2 = t2, a2 = []; g(n2, r2); ) a2.push(r2), r2 = M(r2);
  return a2.push(n2), a2;
};
var ee = function(e2) {
  return function(e3) {
    var t2 = { YYYY: true, MM: true, DD: true }, n2 = e3.split("-");
    if (3 !== n2.length) throw new Error("Date format is invalid.");
    if (!n2.every(function(e4) {
      return t2[e4];
    })) throw new Error("Date format uses unknown parts.");
    return function(e4, t3) {
      if (h(e4)) {
        var r2 = "";
        return n2.forEach(function(n3, a2) {
          "YYYY" === n3 && (r2 += e4.getFullYear()), "MM" === n3 && (r2 += e4.getMonth()), "DD" === n3 && (r2 += e4.getDate()), 2 !== a2 && (r2 += t3);
        }), r2;
      }
    };
  }(e2 || "DD-MM-YYYY");
};
var te = {};
function ne(t2) {
  var r2 = t2.shortcutButtons, a2 = t2.direction, i2 = t2.isDual, l2 = (0, import_react.useMemo)(function() {
    return function(e2, t3) {
      var n2;
      return { root: { display: "flex", padding: "bottom" === e2 ? t3 ? "2%" : "4%" : t3 ? "1.5%" : "2%", alignItems: "center", flexDirection: "bottom" === e2 ? "row" : "column", overflow: "auto", width: "bottom" === e2 ? "100%" : "".concat(130, "px") }, notFirst: (n2 = {}, n2["bottom" === e2 ? "marginLeft" : "marginTop"] = "bottom" === e2 ? t3 ? "3%" : "6%" : "12%", n2) };
    }(a2, i2);
  }, [a2, i2]);
  return import_react.default.createElement("div", { style: l2.root, className: "rc_shortcuts_view" }, r2.map(function(t3, n2) {
    return import_react.default.createElement("div", { style: 0 !== n2 ? l2.notFirst : te, key: t3.id }, t3.render());
  }));
}
var re = import_react.default.forwardRef(function(t2, r2) {
  var a2 = (0, import_react.useRef)(null), i2 = (0, import_react.useMemo)(function() {
    return e2 = (t2.size || 276) * (t2.showDualCalendar ? 2 : 1), { root: { display: "inline-flex", flexDirection: "bottom" === (n2 = t2.direction) ? "column-reverse" : "right" === n2 ? "row-reverse" : "row", width: "".concat(e2 + ("bottom" === n2 ? 0 : 130), "px") } };
    var e2, n2;
  }, [t2.direction, t2.showDualCalendar, t2.size]), s2 = (0, import_react.useMemo)(function() {
    return "rc_shortcut_cal_root " + (t2.useDarkMode ? " rc_dark" : "") + " rc_dir-" + (t2.direction || "left");
  }, [t2.useDarkMode, t2.direction]);
  if (!t2.shortcutButtons.length) throw new Error("Provide a list of shortcut buttons");
  return (0, import_react.useImperativeHandle)(r2, function() {
    return { setView: function(e2) {
      a2.current && e2 && a2.current.setView(e2);
    } };
  }), import_react.default.createElement("div", { style: i2.root, className: s2 }, import_react.default.createElement(ne, { isDual: !!t2.showDualCalendar, direction: t2.direction || "left", shortcutButtons: t2.shortcutButtons }), import_react.default.createElement(Z, o({ ref: a2 }, t2)));
});
export {
  Z as Calendar,
  re as CalendarWithShortcuts,
  $ as giveDaysInRange,
  ee as giveFormatter
};
//# sourceMappingURL=@natscale_react-calendar.js.map
